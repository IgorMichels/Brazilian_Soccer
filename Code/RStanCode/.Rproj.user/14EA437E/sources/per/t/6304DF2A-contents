library(deSolve)
library(dplyr)
library(rstan)
library("bayesplot")
#library("rstanarm")
#library("ggplot2")



n_players = 4;
a = rnorm(n_players); #proficiências com distribuição uniforme, média 200

n_obs = 100;
n_players_per_team = 2; # %numero de jogadores por time
t1 = matrix(nrow = n_obs, ncol = n_players_per_team);
t2 = matrix(nrow = n_obs, ncol = n_players_per_team);

# dadis sinteticos
g = matrix(0, n_obs, 1);
for (k in 1:n_obs){
  jogo = sample(n_players, 2*n_players_per_team);
  t1[k,] = jogo[1:n_players_per_team]; #seleciona aleatoriamente o primeiro time
  t2[k,] = jogo[(n_players_per_team+1):(2*n_players_per_team)]; # agora os segundo

  prob = 1/(1+exp(sum(a[t2[k,]])-sum(a[t1[k,]])));
  if (runif(1) <= prob){
    g[k] = 1; #primeiro time ganhou
  }
  else{
    g[k] = 0; #ou então o segundo time ganhou
  }
}

# estimação da distribuição a posterior
jogos_data = list(n_obs = n_obs,
                  n_players = n_players,
                  n_players_per_team = n_players_per_team,
                  y = g[1:n_obs,],
                  t1 = t1,
                  t2 = t2
                  )

parameters = c("theta")

n_chains=4
#n_warmups=350
#n_iter=5750
n_warmups = 50
n_iter = 500
n_thin=1
set.seed(1234)
# Set initial values:
model <- stan_model('Proficiencias.stan')


profic_fit = sampling( model,
                       data = jogos_data,
                       pars = parameters,
                       chains = n_chains,
                       warmup = n_warmups,
                       iter = n_iter,
                       thin = n_thin,
                       seed = 438497)


theta_medio <- summary(profic_fit)$summary[1:n_players,1]; #Para coletar a mediana, pegue a coluna 6
#print((a-mean(a))/sd(a))
#print((theta_medio - mean(theta_medio))/sd(theta_medio))
print(cor(a, theta_medio))
asort = sort(a, index.return = TRUE);
plot(x=asort$x, y=theta_medio[asort$ix], type ="b", col = "red", xlab = "prof reais", ylab = "prof estim")
